**C Brushup: Control Statements, Arrays, and Functions**

## **1. Control Statements**
Control statements are used to control the flow of execution in a program. They include **decision-making**, **looping**, and **jump statements**.

### **a) Decision-Making Statements**
#### **1. if Statement**
Executes a block of code if a condition is true.
```c
if (condition) {
    // Code to execute if condition is true
}
```
Example:
```c
int num = 10;
if (num > 0) {
    printf("Number is positive");
}
```

#### **2. if-else Statement**
```c
if (condition) {
    // Code if condition is true
} else {
    // Code if condition is false
}
```
Example:
```c
int num = -5;
if (num > 0) {
    printf("Positive");
} else {
    printf("Negative");
}
```

#### **3. Nested if-else**
```c
if (condition1) {
    if (condition2) {
        // Code
    }
}
```

#### **4. switch Statement**
Used to select one option from multiple cases.
```c
switch (expression) {
    case value1:
        // Code for case 1
        break;
    case value2:
        // Code for case 2
        break;
    default:
        // Default case
}
```
Example:
```c
int day = 2;
switch (day) {
    case 1:
        printf("Monday");
        break;
    case 2:
        printf("Tuesday");
        break;
    default:
        printf("Invalid day");
}
```

### **b) Looping Statements**
#### **1. for Loop**
```c
for (initialization; condition; increment/decrement) {
    // Code
}
```
Example:
```c
for (int i = 1; i <= 5; i++) {
    printf("%d ", i);
}
```

#### **2. while Loop**
```c
while (condition) {
    // Code
}
```
Example:
```c
int i = 1;
while (i <= 5) {
    printf("%d ", i);
    i++;
}
```

#### **3. do-while Loop**
```c
do {
    // Code
} while (condition);
```
Example:
```c
int i = 1;
do {
    printf("%d ", i);
    i++;
} while (i <= 5);
```

### **c) Jump Statements**
- **break**: Terminates the loop.
- **continue**: Skips current iteration.
- **goto**: Jumps to a labeled statement.

## **2. Arrays in C**
Arrays store multiple values of the same data type in a single variable.

### **a) One-Dimensional Array**
```c
type arrayName[size];
```
Example:
```c
int numbers[5] = {1, 2, 3, 4, 5};
printf("%d", numbers[0]); // Outputs 1
```

### **b) Two-Dimensional Array**
```c
type arrayName[rows][columns];
```
Example:
```c
int matrix[2][2] = {{1, 2}, {3, 4}};
printf("%d", matrix[0][1]); // Outputs 2
```

## **3. Functions in C**
A function is a block of code that performs a specific task.

### **a) Function Declaration**
```c
returnType functionName(parameters);
```

### **b) Function Definition**
```c
returnType functionName(parameters) {
    // Code
    return value;
}
```
Example:
```c
int add(int a, int b) {
    return a + b;
}
int main() {
    int sum = add(5, 10);
    printf("Sum = %d", sum);
    return 0;
}
```

### **c) Types of Functions**
1. **Functions with no return and no parameters**
2. **Functions with parameters but no return**
3. **Functions with return but no parameters**
4. **Functions with both parameters and return**

### **d) Recursion**
A function calling itself.
```c
int factorial(int n) {
    if (n == 0) return 1;
    return n * factorial(n - 1);
}
```

---
This guide provides a solid foundation on Control Statements, Arrays, and Functions in C before moving on to Python.